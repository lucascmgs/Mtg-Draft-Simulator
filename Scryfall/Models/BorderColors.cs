// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Scryfall.API.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for BorderColors.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum BorderColors
    {
        [EnumMember(Value = "black")]
        Black,
        [EnumMember(Value = "borderless")]
        Borderless,
        [EnumMember(Value = "gold")]
        Gold,
        [EnumMember(Value = "silver")]
        Silver,
        [EnumMember(Value = "white")]
        White
    }
    internal static class BorderColorsEnumExtension
    {
        internal static string ToSerializedValue(this BorderColors? value)
        {
            return value == null ? null : ((BorderColors)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this BorderColors value)
        {
            switch( value )
            {
                case BorderColors.Black:
                    return "black";
                case BorderColors.Borderless:
                    return "borderless";
                case BorderColors.Gold:
                    return "gold";
                case BorderColors.Silver:
                    return "silver";
                case BorderColors.White:
                    return "white";
            }
            return null;
        }

        internal static BorderColors? ParseBorderColors(this string value)
        {
            switch( value )
            {
                case "black":
                    return BorderColors.Black;
                case "borderless":
                    return BorderColors.Borderless;
                case "gold":
                    return BorderColors.Gold;
                case "silver":
                    return BorderColors.Silver;
                case "white":
                    return BorderColors.White;
            }
            return null;
        }
    }
}
